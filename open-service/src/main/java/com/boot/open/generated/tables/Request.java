/*
 * This file is generated by jOOQ.
*/
package com.boot.open.generated.tables;


import com.boot.open.generated.Indexes;
import com.boot.open.generated.Keys;
import com.boot.open.generated.Open;
import com.boot.open.generated.tables.records.RequestRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 请求记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Request extends TableImpl<RequestRecord> {

    private static final long serialVersionUID = -1229633171;

    /**
     * The reference instance of <code>open.request</code>
     */
    public static final Request REQUEST = new Request();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestRecord> getRecordType() {
        return RequestRecord.class;
    }

    /**
     * The column <code>open.request.id</code>. 自增id
     */
    public final TableField<RequestRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "自增id");

    /**
     * The column <code>open.request.request_uri</code>. 请求类别
     */
    public final TableField<RequestRecord, String> REQUEST_URI = createField("request_uri", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "请求类别");

    /**
     * The column <code>open.request.is_deleted</code>. 删除标记
     */
    public final TableField<RequestRecord, Boolean> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "删除标记");

    /**
     * The column <code>open.request.deleted_at</code>. 删除时间
     */
    public final TableField<RequestRecord, LocalDateTime> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 08:00:01", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "删除时间");

    /**
     * The column <code>open.request.created_at</code>. 创建时间
     */
    public final TableField<RequestRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>open.request.updated_at</code>. 更新时间
     */
    public final TableField<RequestRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * Create a <code>open.request</code> table reference
     */
    public Request() {
        this(DSL.name("request"), null);
    }

    /**
     * Create an aliased <code>open.request</code> table reference
     */
    public Request(String alias) {
        this(DSL.name(alias), REQUEST);
    }

    /**
     * Create an aliased <code>open.request</code> table reference
     */
    public Request(Name alias) {
        this(alias, REQUEST);
    }

    private Request(Name alias, Table<RequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Request(Name alias, Table<RequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "请求记录");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Open.OPEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REQUEST_IDX_REQUEST_URI, Indexes.REQUEST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RequestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REQUEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RequestRecord> getPrimaryKey() {
        return Keys.KEY_REQUEST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RequestRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestRecord>>asList(Keys.KEY_REQUEST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Request as(String alias) {
        return new Request(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Request as(Name alias) {
        return new Request(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(String name) {
        return new Request(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(Name name) {
        return new Request(name, null);
    }
}
